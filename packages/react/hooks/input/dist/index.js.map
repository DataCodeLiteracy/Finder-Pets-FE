{
  "version": 3,
  "sources": ["../src/useInput.ts"],
  "sourcesContent": ["import { useState } from \"react\";\nimport { UseInputProps, UseInputResult } from \"./types\";\n\nexport const useInput = (props: UseInputProps): UseInputResult => {\n  const {\n    isDisabled = false,\n    isInvalid = false,\n    isReadOnly = false,\n    isRequired = false,\n    defaultValue,\n    value,\n    onChange,\n    ...rest\n  } = props;\n\n  const isControlled = value !== undefined && onChange !== undefined;\n  const [uncontrolledValue, setUncontrolledValue] = useState(defaultValue ?? \"\");\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (isControlled) {\n      onChange(event);\n    } else {\n      setUncontrolledValue(event.target.value);\n    }\n  };\n\n  const currentValue = isControlled ? value : uncontrolledValue;\n\n  return {\n    inputProps: {\n      ...rest,\n      defaultValue,\n      value: currentValue,\n      onChange: handleChange,\n      disabled: isDisabled,\n      readOnly: isReadOnly,\n      \"data-disabled\": isDisabled,\n      \"data-invalid\": isInvalid,\n      \"aria-invalid\": isInvalid,\n      \"aria-required\": isRequired,\n    },\n    valueCount: currentValue.toString().length,\n  };\n};\n"],
  "mappings": "AAAA,OAAS,YAAAA,MAAgB,QAGlB,IAAMC,EAAYC,GAAyC,CAChE,GAAM,CACJ,WAAAC,EAAa,GACb,UAAAC,EAAY,GACZ,WAAAC,EAAa,GACb,WAAAC,EAAa,GACb,aAAAC,EACA,MAAAC,EACA,SAAAC,EACA,GAAGC,CACL,EAAIR,EAEES,EAAeH,IAAU,QAAaC,IAAa,OACnD,CAACG,EAAmBC,CAAoB,EAAIb,EAASO,GAAA,KAAAA,EAAgB,EAAE,EAEvEO,EAAgBC,GAA+C,CAC/DJ,EACFF,EAASM,CAAK,EAEdF,EAAqBE,EAAM,OAAO,KAAK,CAE3C,EAEMC,EAAeL,EAAeH,EAAQI,EAE5C,MAAO,CACL,WAAY,CACV,GAAGF,EACH,aAAAH,EACA,MAAOS,EACP,SAAUF,EACV,SAAUX,EACV,SAAUE,EACV,gBAAiBF,EACjB,eAAgBC,EAChB,eAAgBA,EAChB,gBAAiBE,CACnB,EACA,WAAYU,EAAa,SAAS,EAAE,MACtC,CACF",
  "names": ["useState", "useInput", "props", "isDisabled", "isInvalid", "isReadOnly", "isRequired", "defaultValue", "value", "onChange", "rest", "isControlled", "uncontrolledValue", "setUncontrolledValue", "handleChange", "event", "currentValue"]
}
